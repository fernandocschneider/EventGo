generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  COMPANY
  ORGANIZER
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  passwordHash      String
  avatarUrl         String?
  role              Role     @default(USER)
  profilePublicInfo String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  organizedTrips  Trip[]         @relation("TripOrganizer")
  participations  Participant[]
  createdCosts    CostItem[]
  ownedCompanies  Company[]      @relation("CompanyOwner")

  @@map("users")
}

model Company {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  contactEmail String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ownerId       Int
  owner         User            @relation("CompanyOwner", fields: [ownerId], references: [id])
  events        Event[]
  vehicleOffers VehicleOffer[]

  @@map("companies")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  city        String
  venue       String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizerCompanyId Int?
  organizerCompany   Company? @relation(fields: [organizerCompanyId], references: [id])
  trips              Trip[]

  @@map("events")
}

model Trip {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  originCity      String
  destinationCity String
  date            DateTime
  maxParticipants Int?
  pricePerPerson  Float?
  code            String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  eventId       Int
  event         Event           @relation(fields: [eventId], references: [id])
  organizerId   Int
  organizer     User            @relation("TripOrganizer", fields: [organizerId], references: [id])
  participants  Participant[]
  costItems     CostItem[]
  vehicleOffers VehicleOffer[]

  @@map("trips")
}

model Participant {
  id       Int      @id @default(autoincrement())
  joinedAt DateTime @default(now())

  userId Int
  user   User   @relation(fields: [userId], references: [id])
  tripId Int
  trip   Trip   @relation(fields: [tripId], references: [id])

  @@unique([userId, tripId])
  @@map("participants")
}

model CostItem {
  id          Int      @id @default(autoincrement())
  label       String
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tripId    Int
  trip      Trip   @relation(fields: [tripId], references: [id])
  createdBy Int
  creator   User   @relation(fields: [createdBy], references: [id])

  @@map("cost_items")
}

model VehicleOffer {
  id             Int       @id @default(autoincrement())
  vehicleType    String    @default("CAR")
  capacity       Int
  pricePerPerson Float?
  pickupLocation String
  pickupTime     DateTime
  description    String?
  notes          String?
  contactInfo    String
  isAvailable    Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  tripId    Int?
  trip      Trip?   @relation(fields: [tripId], references: [id])

  @@map("vehicle_offers")
}
